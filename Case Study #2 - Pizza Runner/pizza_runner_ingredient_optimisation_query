-- Solved on PostgreSQL v13 by Duong Le Thanh Truc
-- Date: 2023/10/23

/* --------------------
   Data Cleaning
   --------------------*/

-- Table: customer_orders
-- Replace all blank or 'null' values wiht NULL in the exclusions and extras fields.

CREATE TEMP TABLE customer_orders_temp AS
SELECT 
  order_id, 
  customer_id, 
  pizza_id, 
  CASE
	  WHEN exclusions = '' OR exclusions = 'null' THEN NULL
	  ELSE exclusions
	  END AS exclusions,
  CASE
	  WHEN extras = '' OR extras = 'null' THEN NULL
	  ELSE extras
	  END AS extras,
	order_time
FROM pizza_runner.customer_orders;


-- Table: runner_orders
-- Replace all blank or 'null' values wiht NULL in the pickup_time, distance, duration, and cancellation fields.
-- Remove 'km' from the distance field.
-- Extract numeric characters from the duration field.

CREATE TEMP TABLE runner_orders_temp AS
SELECT 
  order_id, 
  runner_id, 
  CASE
  	WHEN pickup_time = 'null' THEN NULL
    ELSE pickup_time::TIMESTAMP
   END AS pickup_time,
   CASE
   	WHEN distance = 'null' THEN NULL
    WHEN distance LIKE '%km' THEN TRIM(distance,'km')::FLOAT
   	ELSE distance::FLOAT
   END AS distance,
   CASE
   	WHEN duration = 'null' THEN NULL
    ELSE regexp_replace(duration, '[^0-9]', '', 'g')::INT
   END AS duration,
   CASE
   	WHEN cancellation = 'null' OR cancellation = '' THEN NULL
    ELSE cancellation
   END AS cancellation
FROM pizza_runner.runner_orders;

-- Change data type in the runner_orders_temp table
ALTER TABLE runner_orders_temp
ALTER COLUMN pickup_time TYPE TIMESTAMP,
ALTER COLUMN distance TYPE FLOAT,
ALTER COLUMN duration TYPE INT;


-- Table: pizza_recipes
-- Split comma delimited lists into rows.
CREATE TEMP TABLE pizza_recipes_temp AS
SELECT
	pizza_id,
    UNNEST(STRING_TO_ARRAY(toppings, ', '))::INT AS toppings
FROM pizza_runner.pizza_recipes;

-- Change data type in the pizza_recipes_temp table
ALTER TABLE pizza_recipes_temp
ALTER toppings TYPE INT;

/* --------------------
   C. Ingredient Optimisation
   --------------------*/
   
-- 1. What are the standard ingredients for each pizza?
-- Use STRING_AGG() to concate a list of string.

SELECT
	pizza_name, 
	STRING_AGG(topping_name, ', ' ORDER BY topping_name) AS toppings
FROM pizza_recipes_temp r
INNER JOIN pizza_runner.pizza_names USING(pizza_id)
INNER JOIN pizza_runner.pizza_toppings t ON r.toppings = t.topping_id
GROUP BY 1
ORDER BY 1;


-- 2. What was the most commonly added extra?

-- Expand extras to set of row.
WITH extra_toppings AS (
  SELECT
      UNNEST(STRING_TO_ARRAY(extras, ', '))::INT AS extras,
      COUNT(1) AS fre
  FROM customer_orders_temp
  GROUP BY 1
)

SELECT 
	topping_name,
	fre
FROM extra_toppings e
INNER JOIN pizza_runner.pizza_toppings t ON e.extras = t.topping_id
WHERE fre = (
	SELECT MAX(fre)
  	FROM extra_toppings
);


-- 3. What was the most common exclusion?

-- Expand exclusions to set of row.
WITH excluded_toppings AS (
  SELECT
      UNNEST(STRING_TO_ARRAY(exclusions, ', '))::INT AS exclusions,
      COUNT(1) AS fre
  FROM customer_orders_temp
  GROUP BY 1
)

SELECT 
	topping_name,
	fre
FROM excluded_toppings e
INNER JOIN pizza_runner.pizza_toppings t ON e.exclusions = t.topping_id
WHERE fre = (
	SELECT MAX(fre)
  	FROM excluded_toppings
);


-- 4.Generate an order item for each record in the customers_orders table in the format of one of the following:
    -- Meat Lovers
    -- Meat Lovers - Exclude Beef
    -- Meat Lovers - Extra Bacon
    -- Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

-- Mark order line
WITH order_cus_rn AS (
  SELECT 
      ROW_NUMBER() OVER() AS rn,
      *
  FROM customer_orders_temp
),

-- Expand exclusives and extras to set of row. The result will exclude pizzas without extras or exclusives.
exclusives_extras AS (
  SELECT 
      rn,
      order_id,
      pizza_id,
      UNNEST(STRING_TO_ARRAY(exclusions, ', '))::INT AS exclusions,
      UNNEST(STRING_TO_ARRAY(extras, ', '))::INT AS extras
  FROM order_cus_rn o
),

-- Find name of pizzas, extras and excluded toppings
customed_pizzas AS (
  SELECT
      rn,
      order_id,
      pizza_name,
      STRING_AGG(t1.topping_name, ', ' ORDER BY exclusions) AS exclusions,
      STRING_AGG(t2.topping_name, ', ' ORDER BY extras) AS extras
  FROM exclusives_extras o
  LEFT JOIN pizza_runner.pizza_names USING(pizza_id)
  LEFT JOIN pizza_runner.pizza_toppings t1 ON o.exclusions = t1.topping_id
  LEFT JOIN pizza_runner.pizza_toppings t2 ON o.extras = t2.topping_id
  GROUP BY 1, 2, 3
),

-- Find name of pizzas without customization
original_pizzas AS (
  SELECT
      rn,
      order_id,
      pizza_name,
      exclusions,
      extras
  FROM order_cus_rn
  INNER JOIN pizza_runner.pizza_names USING(pizza_id)
  WHERE exclusions IS NULL 
      AND extras IS NULL
)

SELECT 
	order_id,
	order_item
FROM (
  SELECT 
      rn,
      order_id,
      pizza_name || 
      CASE 
          WHEN exclusions IS NOT NULL THEN ' - Exclude ' || exclusions
          ELSE ''
      END ||
      CASE 
          WHEN extras IS NOT NULL THEN ' - Extra ' || extras
          ELSE ''
      END AS order_item
  FROM customed_pizzas
  UNION 
  SELECT 
      rn,
      order_id,
      pizza_name AS order_item
  FROM original_pizzas
) AS orders
ORDER BY rn;


-- 5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients.
    -- For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
    
-- Mark order line.
WITH order_cus_rn AS (
  SELECT 
      ROW_NUMBER() OVER() AS rn,
      *
  FROM customer_orders_temp
),

-- Generate an expanded list of pizzas, toppings, and counts for each order.
expanded_order_pizzas AS (
  SELECT *
  FROM order_cus_rn
  INNER JOIN pizza_runner.pizza_recipes USING(pizza_id)
  INNER JOIN pizza_runner.pizza_names USING(pizza_id)
  CROSS JOIN  pizza_runner.pizza_toppings
),

-- Calculate topping counts for each pizza in the order list.
order_topping_counts AS (
  SELECT 
      rn,
      order_id,
      pizza_name,
      topping_name,
      -- toppings
      CASE
          WHEN topping_id IN (
              SELECT UNNEST(STRING_TO_ARRAY(toppings, ', '))::INT
      ) THEN 1
          ELSE 0
      END +
      -- exclusions
      CASE
          WHEN exclusions IS NOT NULL AND topping_id IN (
              SELECT UNNEST(STRING_TO_ARRAY(exclusions, ', '))::INT
      ) THEN - 1
          ELSE 0
      END +
      -- extras
      CASE
          WHEN extras IS NOT NULL AND topping_id IN (
              SELECT UNNEST(STRING_TO_ARRAY(extras, ', '))::INT
      ) THEN 1
          ELSE 0
      END AS topping_cnt
  FROM expanded_order_pizzas
)

SELECT 
	order_id,
	order_ingredients
FROM (
  SELECT 
      rn,
      order_id,
      pizza_name || ': ' ||
      STRING_AGG(
          CASE 
              WHEN topping_cnt > 1 THEN  topping_cnt || 'x' 
              ELSE ''
          END || topping_name,
          ', ' ORDER BY LOWER(topping_name)
      ) AS order_ingredients
  FROM order_topping_counts
  WHERE topping_cnt > 0
  GROUP BY 1, 2, pizza_name
) a
ORDER BY rn;


-- 6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
-- Delivered pizza = Pizza delivered sucessfully.

-- Get order lines of successful orders.
WITH successful_order_line AS (
  SELECT o.*
  FROM customer_orders_temp o
  INNER JOIN  runner_orders_temp USING(order_id)
  WHERE cancellation IS NULL
),

-- Calculate counts of exclusions for each topping in successful orders.
exclusions AS (
  SELECT
      UNNEST(STRING_TO_ARRAY(exclusions, ', '))::INT AS topping_id,
      COUNT(*) AS exclusions_cnt
  FROM successful_order_line
  GROUP BY 1
),

-- Calculate counts of extras for each topping in successful orders.
extras AS (
  SELECT
      UNNEST(STRING_TO_ARRAY(extras, ', '))::INT AS topping_id,
      COUNT(*) AS extras_cnt
  FROM successful_order_line
  GROUP BY 1
),

-- Calculate counts of main_ingredients for each topping in successful orders.
main_ingredients AS (
  SELECT
      toppings AS topping_id,
      COUNT(*) AS main_ingredient_cnt
  FROM successful_order_line
  INNER JOIN pizza_recipes_temp USING(pizza_id)
  GROUP BY 1
)

SELECT 
	topping_name,
	CASE
		WHEN main_ingredient_cnt IS NULL THEN 0
		ELSE main_ingredient_cnt
	END -
	CASE
		WHEN exclusions_cnt IS NULL THEN 0
		ELSE exclusions_cnt
	END +
	CASE
		WHEN extras_cnt IS NULL THEN 0
		ELSE extras_cnt
	END AS ingredient_cnt
FROM main_ingredients
FULL JOIN exclusions USING(topping_id)
FULL JOIN extras USING(topping_id)
INNER JOIN pizza_runner.pizza_toppings USING(topping_id)
ORDER BY 2 DESC;


